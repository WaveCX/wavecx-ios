// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name WaveCxSdk
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Content : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct WaveCxConfig {
}
@objc @_hasMissingDesignatedInitializers final public class WaveCx : ObjectiveC.NSObject {
  weak final public var delegate: (any WaveCxSdk.WaveCxDelegate)?
  public static func create(organizationCode: Swift.String) -> WaveCxSdk.WaveCx
  public static func create(organizationCode: Swift.String, apiBaseUrl: Swift.String) -> WaveCxSdk.WaveCx
  public static var shared: WaveCxSdk.WaveCx {
    get
  }
  public static func configureShared(organizationCode: Swift.String)
  public static func configureShared(organizationCode: Swift.String, apiBaseUrl: Swift.String)
  final public func startUserSession(userId: Swift.String) async
  final public func startUserSession(userId: Swift.String, userIdVerification: Swift.String) async
  final public func startUserSession(userId: Swift.String, userAttributes: Any) async
  final public func endUserSession()
  final public func triggerPoint(triggerPointCode: Swift.String)
  final public func hasPopupContentForTriggerPoint(triggerPointCode: Swift.String) -> Swift.Bool
  final public func hasUserTriggeredContentForTriggerPoint(triggerPointCode: Swift.String) -> Swift.Bool
  final public func hasUserTriggeredContent() -> Swift.Bool
  final public func showUserTriggeredContent()
  @objc deinit
}
public protocol WaveCxDelegate : AnyObject {
  func onError(error: any Swift.Error)
  func onContentReceived(content: [WaveCxSdk.Content])
  func onWillShowContent(content: WaveCxSdk.Content, cancel: @escaping () -> Swift.Void)
  func onDidShowContent(content: WaveCxSdk.Content)
  func onContentDismissed()
}
